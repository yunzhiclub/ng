import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class RouterStub {
    constructor() {
        /**
         * 事件源
         */
        this.eventsSubject = new Subject();
        this.navigateCallbackFns = [];
        this.events = this.eventsSubject.asObservable();
    }
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param commands 未知
     * @param navigationExtras 未知
     */
    createUrlTree(commands, navigationExtras = {}) {
        return {
            root: null,
            queryParams: null,
            fragment: null,
            queryParamMap: null,
            toString() {
                return '';
            }
        };
    }
    /**
     * 弹出新事件
     * @param event 事件
     */
    emitEvent(event) {
        this.eventsSubject.next(event);
    }
    navigateByUrl(url, extras) {
        console.log('接收到了跳转请求', url, extras);
        return Promise.resolve(true);
    }
    /**
     * 跳转
     * @param commands 参数
     * @param extras 扩展属性
     */
    navigate(commands, extras) {
        this.navigateCallbackFns.forEach(callback => callback(extras.queryParams));
        return Promise.resolve(true);
    }
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param url 未知
     */
    serializeUrl(url) {
        return '';
    }
    /**
     * 注册导航返回的回调
     * @param fn 回调函数
     */
    registerNavigateCallbackFn(fn) {
        this.navigateCallbackFns.push(fn);
    }
}
RouterStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RouterStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnN0dWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9yb3V0ZXItdGVzdGluZy9zcmMvbGliL3JvdXRlci5zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFTekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFHekMsTUFBTSxPQUFPLFVBQVU7SUFZckI7UUFQQTs7V0FFRztRQUNjLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVMsQ0FBQztRQUU5Qyx3QkFBbUIsR0FBRyxFQUF1QyxDQUFDO1FBR3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGFBQWEsQ0FBQyxRQUFlLEVBQUUsbUJBQXVDLEVBQUU7UUFDdEUsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJO1lBQ1YsV0FBVyxFQUFFLElBQUk7WUFDakIsUUFBUSxFQUFFLElBQUk7WUFDZCxhQUFhLEVBQUUsSUFBSTtZQUNuQixRQUFRO2dCQUNOLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLEtBQVk7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxHQUFxQixFQUFFLE1BQXlCO1FBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsUUFBZSxFQUFFLE1BQXlCO1FBQ2pELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDM0UsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxZQUFZLENBQUMsR0FBWTtRQUN2QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRDs7O09BR0c7SUFDSCwwQkFBMEIsQ0FBQyxFQUFpQztRQUMxRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O3VHQXRFVSxVQUFVOzJHQUFWLFVBQVU7MkZBQVYsVUFBVTtrQkFEdEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBBY3RpdmF0ZWRSb3V0ZSxcbiAgRXZlbnQsXG4gIE5hdmlnYXRpb25FeHRyYXMsXG4gIFBhcmFtcyxcbiAgUXVlcnlQYXJhbXNIYW5kbGluZyxcbiAgVXJsVHJlZVxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvdXRlclN0dWIge1xuICAvKipcbiAgICogQW4gZXZlbnQgc3RyZWFtIGZvciByb3V0aW5nIGV2ZW50cyBpbiB0aGlzIE5nTW9kdWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgZXZlbnRzOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgLyoqXG4gICAqIOS6i+S7tua6kFxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBldmVudHNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8RXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBuYXZpZ2F0ZUNhbGxiYWNrRm5zID0gW10gYXMgKChxdWVyeVBhcmFtczogUGFyYW1zKSA9PiB2b2lkKVtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnRzID0gdGhpcy5ldmVudHNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWinuWKoOivpeWHveaVsOeahOebrueahOS7heS4uua7oei2s0lvbmlj5a+5cm91dGUtbGlua+aMh+S7pOeahOWkhOeQhlxuICAgKiBAcGFyYW0gY29tbWFuZHMg5pyq55+lXG4gICAqIEBwYXJhbSBuYXZpZ2F0aW9uRXh0cmFzIOacquefpVxuICAgKi9cbiAgY3JlYXRlVXJsVHJlZShjb21tYW5kczogYW55W10sIG5hdmlnYXRpb25FeHRyYXM6IFVybENyZWF0aW9uT3B0aW9ucyA9IHt9KTogVXJsVHJlZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICBxdWVyeVBhcmFtczogbnVsbCxcbiAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgcXVlcnlQYXJhbU1hcDogbnVsbCxcbiAgICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOW8ueWHuuaWsOS6i+S7tlxuICAgKiBAcGFyYW0gZXZlbnQg5LqL5Lu2XG4gICAqL1xuICBlbWl0RXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5ldmVudHNTdWJqZWN0Lm5leHQoZXZlbnQpO1xuICB9XG5cbiAgbmF2aWdhdGVCeVVybCh1cmw6IHN0cmluZyB8IFVybFRyZWUsIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zb2xlLmxvZygn5o6l5pS25Yiw5LqG6Lez6L2s6K+35rGCJywgdXJsLCBleHRyYXMpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICog6Lez6L2sXG4gICAqIEBwYXJhbSBjb21tYW5kcyDlj4LmlbBcbiAgICogQHBhcmFtIGV4dHJhcyDmianlsZXlsZ7mgKdcbiAgICovXG4gIG5hdmlnYXRlKGNvbW1hbmRzOiBhbnlbXSwgZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRoaXMubmF2aWdhdGVDYWxsYmFja0Zucy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGV4dHJhcy5xdWVyeVBhcmFtcykpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICog5aKe5Yqg6K+l5Ye95pWw55qE55uu55qE5LuF5Li65ruh6LazSW9uaWPlr7lyb3V0ZS1saW5r5oyH5Luk55qE5aSE55CGXG4gICAqIEBwYXJhbSB1cmwg5pyq55+lXG4gICAqL1xuICBzZXJpYWxpemVVcmwodXJsOiBVcmxUcmVlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICog5rOo5YaM5a+86Iiq6L+U5Zue55qE5Zue6LCDXG4gICAqIEBwYXJhbSBmbiDlm57osIPlh73mlbBcbiAgICovXG4gIHJlZ2lzdGVyTmF2aWdhdGVDYWxsYmFja0ZuKGZuOiAocXVlcnlQYXJhbXM6IFBhcmFtcykgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMubmF2aWdhdGVDYWxsYmFja0Zucy5wdXNoKGZuKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgVXJsQ3JlYXRpb25PcHRpb25zIHtcbiAgcmVsYXRpdmVUbz86IEFjdGl2YXRlZFJvdXRlIHwgbnVsbDtcbiAgcXVlcnlQYXJhbXM/OiBQYXJhbXMgfCBudWxsO1xuICBmcmFnbWVudD86IHN0cmluZztcbiAgcXVlcnlQYXJhbXNIYW5kbGluZz86IFF1ZXJ5UGFyYW1zSGFuZGxpbmcgfCBudWxsO1xuICBwcmVzZXJ2ZUZyYWdtZW50PzogYm9vbGVhbjtcbn1cblxuIl19
