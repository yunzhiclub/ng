import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { ActivatedRouteSnapshot, ActivationEnd } from '@angular/router';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * 路由测试桩
 */
export class ActivatedRouteStub {
    /**
     * 当有新路由参数时，弹出ActivationEnd事件，供在服务中通过Router获取全局路由信息
     * 比如：实现回退功能时，需要对每个路由信息进行缓存
     * @param router 路由
     */
    constructor(router) {
        this.paramsSubject = new Subject();
        this.paramMapSubject = new Subject();
        this.queryParamsSubject = new Subject();
        this.queryParamMapSubject = new Subject();
        this.snapshot = {
            paramMap: {
                get: () => {
                    return 0;
                }
            }
        };
        this.router = router;
        this.params = this.paramsSubject.asObservable();
        this.paramMap = this.paramMapSubject.asObservable();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.paramsSubject.pipe(tap(params => {
            const activatedRouteSnapshot = new ActivatedRouteSnapshot();
            activatedRouteSnapshot.params = params;
            this.router.emitEvent(new ActivationEnd(activatedRouteSnapshot));
        })).subscribe();
        // 注册导航后的回调
        this.router.registerNavigateCallbackFn((queryParams) => {
            this.queryParamsSubject.next(queryParams);
        });
    }
}
ActivatedRouteStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
ActivatedRouteStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }]; } });
export class ParamMapImpl {
    constructor(values) {
        this.keys = [];
        this.values = {};
        for (const key in values) {
            if (values[key] !== undefined) {
                const value = values[key];
                this.keys.push(key);
                this.values[key] = value;
            }
        }
    }
    get(name) {
        return this.values[name];
    }
    getAll(name) {
        return this.values[name];
    }
    has(name) {
        return this.keys.indexOf(name) >= 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGVkLXJvdXRlLnN0dWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9yb3V0ZXItdGVzdGluZy9zcmMvbGliL2FjdGl2YXRlZC1yb3V0ZS5zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxzQkFBc0IsRUFBRSxhQUFhLEVBQTJCLE1BQU0saUJBQWlCLENBQUM7QUFDaEcsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7O0FBRXpDOztHQUVHO0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtJQW1CN0I7Ozs7T0FJRztJQUNILFlBQVksTUFBYztRQXRCMUIsa0JBQWEsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBRXRDLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQVksQ0FBQztRQUUxQyx1QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBRTNDLHlCQUFvQixHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFHL0MsYUFBUSxHQUFHO1lBQ1QsUUFBUSxFQUFFO2dCQUNSLEdBQUcsRUFBRSxHQUFHLEVBQUU7b0JBQ1IsT0FBTyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQzthQUNGO1NBQ0YsQ0FBQztRQVFBLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBK0IsQ0FBQztRQUM5QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNuQyxNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztZQUM1RCxzQkFBc0IsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLFdBQVc7UUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsV0FBbUIsRUFBRSxFQUFFO1lBQzdELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzsrR0F0Q1Usa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVTs7QUEwQ1gsTUFBTSxPQUFPLFlBQVk7SUFnQnZCLFlBQVksTUFBNEM7UUFDdEQsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN4QixJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDO0lBdEJELEdBQUcsQ0FBQyxJQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFhLENBQUM7SUFDdkMsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQWFGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1JvdXRlclN0dWJ9IGZyb20gJy4vcm91dGVyLnN0dWInO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBBY3RpdmF0aW9uRW5kLCBQYXJhbU1hcCwgUGFyYW1zLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIOi3r+eUsea1i+ivleahqVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWN0aXZhdGVkUm91dGVTdHViIHtcbiAgcm91dGVyOiBSb3V0ZXJTdHViO1xuICBwYXJhbXNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8UGFyYW1zPigpO1xuICBwYXJhbXM6IE9ic2VydmFibGU8UGFyYW1zPjtcbiAgcGFyYW1NYXBTdWJqZWN0ID0gbmV3IFN1YmplY3Q8UGFyYW1NYXA+KCk7XG4gIHBhcmFtTWFwOiBPYnNlcnZhYmxlPFBhcmFtTWFwPjtcbiAgcXVlcnlQYXJhbXNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8UGFyYW1zPigpO1xuICBxdWVyeVBhcmFtczogT2JzZXJ2YWJsZTxQYXJhbXM+O1xuICBxdWVyeVBhcmFtTWFwU3ViamVjdCA9IG5ldyBTdWJqZWN0PFBhcmFtTWFwPigpO1xuICBxdWVyeVBhcmFtc01hcDogT2JzZXJ2YWJsZTxQYXJhbU1hcD5cblxuICBzbmFwc2hvdCA9IHtcbiAgICBwYXJhbU1hcDoge1xuICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICog5b2T5pyJ5paw6Lev55Sx5Y+C5pWw5pe277yM5by55Ye6QWN0aXZhdGlvbkVuZOS6i+S7tu+8jOS+m+WcqOacjeWKoeS4remAmui/h1JvdXRlcuiOt+WPluWFqOWxgOi3r+eUseS/oeaBr1xuICAgKiDmr5TlpoLvvJrlrp7njrDlm57pgIDlip/og73ml7bvvIzpnIDopoHlr7nmr4/kuKrot6/nlLHkv6Hmga/ov5vooYznvJPlrZhcbiAgICogQHBhcmFtIHJvdXRlciDot6/nlLFcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyKSB7XG4gICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXIgYXMgdW5rbm93biBhcyBSb3V0ZXJTdHViO1xuICAgIHRoaXMucGFyYW1zID0gdGhpcy5wYXJhbXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMucGFyYW1NYXAgPSB0aGlzLnBhcmFtTWFwU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnF1ZXJ5UGFyYW1zID0gdGhpcy5xdWVyeVBhcmFtc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5wYXJhbXNTdWJqZWN0LnBpcGUodGFwKHBhcmFtcyA9PiB7XG4gICAgICBjb25zdCBhY3RpdmF0ZWRSb3V0ZVNuYXBzaG90ID0gbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QoKTtcbiAgICAgIGFjdGl2YXRlZFJvdXRlU25hcHNob3QucGFyYW1zID0gcGFyYW1zO1xuICAgICAgdGhpcy5yb3V0ZXIuZW1pdEV2ZW50KG5ldyBBY3RpdmF0aW9uRW5kKGFjdGl2YXRlZFJvdXRlU25hcHNob3QpKTtcbiAgICB9KSkuc3Vic2NyaWJlKCk7XG4gICAgLy8g5rOo5YaM5a+86Iiq5ZCO55qE5Zue6LCDXG4gICAgdGhpcy5yb3V0ZXIucmVnaXN0ZXJOYXZpZ2F0ZUNhbGxiYWNrRm4oKHF1ZXJ5UGFyYW1zOiBQYXJhbXMpID0+IHtcbiAgICAgIHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0Lm5leHQocXVlcnlQYXJhbXMpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJhbU1hcEltcGwgaW1wbGVtZW50cyBQYXJhbU1hcCB7XG4gIHJlYWRvbmx5IGtleXM6IHN0cmluZ1tdO1xuICByZWFkb25seSB2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW10gfTtcblxuICBnZXQobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzW25hbWVdIGFzIHN0cmluZztcbiAgfVxuXG4gIGdldEFsbChuYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzW25hbWVdIGFzIHN0cmluZ1tdO1xuICB9XG5cbiAgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmtleXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG5cbiAgY29uc3RydWN0b3IodmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdIH0pIHtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgICB0aGlzLnZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNba2V5XTtcbiAgICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdGhpcy52YWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19