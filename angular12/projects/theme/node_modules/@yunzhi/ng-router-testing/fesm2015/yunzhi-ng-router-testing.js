import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { ActivatedRouteSnapshot, ActivationEnd, ActivatedRoute, Router } from '@angular/router';
import { RouterTestingModule as RouterTestingModule$1 } from '@angular/router/testing';
import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';

/**
 * 路由测试桩
 */
class ActivatedRouteStub {
    /**
     * 当有新路由参数时，弹出ActivationEnd事件，供在服务中通过Router获取全局路由信息
     * 比如：实现回退功能时，需要对每个路由信息进行缓存
     * @param router 路由
     */
    constructor(router) {
        this.paramsSubject = new Subject();
        this.paramMapSubject = new Subject();
        this.queryParamsSubject = new Subject();
        this.queryParamMapSubject = new Subject();
        this.snapshot = {
            paramMap: {
                get: () => {
                    return 0;
                }
            }
        };
        this.router = router;
        this.params = this.paramsSubject.asObservable();
        this.paramMap = this.paramMapSubject.asObservable();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.paramsSubject.pipe(tap(params => {
            const activatedRouteSnapshot = new ActivatedRouteSnapshot();
            activatedRouteSnapshot.params = params;
            this.router.emitEvent(new ActivationEnd(activatedRouteSnapshot));
        })).subscribe();
        // 注册导航后的回调
        this.router.registerNavigateCallbackFn((queryParams) => {
            this.queryParamsSubject.next(queryParams);
        });
    }
}
ActivatedRouteStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
ActivatedRouteStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: ActivatedRouteStub, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }]; } });
class ParamMapImpl {
    constructor(values) {
        this.keys = [];
        this.values = {};
        for (const key in values) {
            if (values[key] !== undefined) {
                const value = values[key];
                this.keys.push(key);
                this.values[key] = value;
            }
        }
    }
    get(name) {
        return this.values[name];
    }
    getAll(name) {
        return this.values[name];
    }
    has(name) {
        return this.keys.indexOf(name) >= 0;
    }
}

class RouterStub {
    constructor() {
        /**
         * 事件源
         */
        this.eventsSubject = new Subject();
        this.navigateCallbackFns = [];
        this.events = this.eventsSubject.asObservable();
    }
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param commands 未知
     * @param navigationExtras 未知
     */
    createUrlTree(commands, navigationExtras = {}) {
        return {
            root: null,
            queryParams: null,
            fragment: null,
            queryParamMap: null,
            toString() {
                return '';
            }
        };
    }
    /**
     * 弹出新事件
     * @param event 事件
     */
    emitEvent(event) {
        this.eventsSubject.next(event);
    }
    navigateByUrl(url, extras) {
        console.log('接收到了跳转请求', url, extras);
        return Promise.resolve(true);
    }
    /**
     * 跳转
     * @param commands 参数
     * @param extras 扩展属性
     */
    navigate(commands, extras) {
        this.navigateCallbackFns.forEach(callback => callback(extras.queryParams));
        return Promise.resolve(true);
    }
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param url 未知
     */
    serializeUrl(url) {
        return '';
    }
    /**
     * 注册导航返回的回调
     * @param fn 回调函数
     */
    registerNavigateCallbackFn(fn) {
        this.navigateCallbackFns.push(fn);
    }
}
RouterStub.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RouterStub.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterStub, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

class RouterTestingModule {
}
RouterTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
RouterTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterTestingModule, imports: [RouterTestingModule$1], exports: [RouterTestingModule$1] });
RouterTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterTestingModule, providers: [
        { provide: ActivatedRoute, useClass: ActivatedRouteStub },
        { provide: Router, useClass: RouterStub },
    ], imports: [[RouterTestingModule$1], RouterTestingModule$1] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RouterTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterTestingModule$1],
                    providers: [
                        { provide: ActivatedRoute, useClass: ActivatedRouteStub },
                        { provide: Router, useClass: RouterStub },
                    ],
                    exports: [RouterTestingModule$1]
                }]
        }] });

/*
 * Public API Surface of router-testing
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActivatedRouteStub, ParamMapImpl, RouterStub, RouterTestingModule };
//# sourceMappingURL=yunzhi-ng-router-testing.js.map
