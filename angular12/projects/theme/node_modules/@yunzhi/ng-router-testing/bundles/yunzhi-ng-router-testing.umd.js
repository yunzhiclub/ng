(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/router/testing'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@yunzhi/ng-router-testing', ['exports', '@angular/core', '@angular/router', '@angular/router/testing', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.yunzhi = global.yunzhi || {}, global.yunzhi['ng-router-testing'] = {}), global.ng.core, global.ng.router, global.ng.router.testing, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, i1, testing, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * 路由测试桩
     */
    var ActivatedRouteStub = /** @class */ (function () {
        /**
         * 当有新路由参数时，弹出ActivationEnd事件，供在服务中通过Router获取全局路由信息
         * 比如：实现回退功能时，需要对每个路由信息进行缓存
         * @param router 路由
         */
        function ActivatedRouteStub(router) {
            var _this = this;
            this.paramsSubject = new rxjs.Subject();
            this.paramMapSubject = new rxjs.Subject();
            this.queryParamsSubject = new rxjs.Subject();
            this.queryParamMapSubject = new rxjs.Subject();
            this.snapshot = {
                paramMap: {
                    get: function () {
                        return 0;
                    }
                }
            };
            this.router = router;
            this.params = this.paramsSubject.asObservable();
            this.paramMap = this.paramMapSubject.asObservable();
            this.queryParams = this.queryParamsSubject.asObservable();
            this.paramsSubject.pipe(operators.tap(function (params) {
                var activatedRouteSnapshot = new i1.ActivatedRouteSnapshot();
                activatedRouteSnapshot.params = params;
                _this.router.emitEvent(new i1.ActivationEnd(activatedRouteSnapshot));
            })).subscribe();
            // 注册导航后的回调
            this.router.registerNavigateCallbackFn(function (queryParams) {
                _this.queryParamsSubject.next(queryParams);
            });
        }
        return ActivatedRouteStub;
    }());
    ActivatedRouteStub.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: ActivatedRouteStub, deps: [{ token: i1__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActivatedRouteStub.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: ActivatedRouteStub });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: ActivatedRouteStub, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.Router }]; } });
    var ParamMapImpl = /** @class */ (function () {
        function ParamMapImpl(values) {
            this.keys = [];
            this.values = {};
            for (var key in values) {
                if (values[key] !== undefined) {
                    var value = values[key];
                    this.keys.push(key);
                    this.values[key] = value;
                }
            }
        }
        ParamMapImpl.prototype.get = function (name) {
            return this.values[name];
        };
        ParamMapImpl.prototype.getAll = function (name) {
            return this.values[name];
        };
        ParamMapImpl.prototype.has = function (name) {
            return this.keys.indexOf(name) >= 0;
        };
        return ParamMapImpl;
    }());

    var RouterStub = /** @class */ (function () {
        function RouterStub() {
            /**
             * 事件源
             */
            this.eventsSubject = new rxjs.Subject();
            this.navigateCallbackFns = [];
            this.events = this.eventsSubject.asObservable();
        }
        /**
         * 增加该函数的目的仅为满足Ionic对route-link指令的处理
         * @param commands 未知
         * @param navigationExtras 未知
         */
        RouterStub.prototype.createUrlTree = function (commands, navigationExtras) {
            if (navigationExtras === void 0) { navigationExtras = {}; }
            return {
                root: null,
                queryParams: null,
                fragment: null,
                queryParamMap: null,
                toString: function () {
                    return '';
                }
            };
        };
        /**
         * 弹出新事件
         * @param event 事件
         */
        RouterStub.prototype.emitEvent = function (event) {
            this.eventsSubject.next(event);
        };
        RouterStub.prototype.navigateByUrl = function (url, extras) {
            console.log('接收到了跳转请求', url, extras);
            return Promise.resolve(true);
        };
        /**
         * 跳转
         * @param commands 参数
         * @param extras 扩展属性
         */
        RouterStub.prototype.navigate = function (commands, extras) {
            this.navigateCallbackFns.forEach(function (callback) { return callback(extras.queryParams); });
            return Promise.resolve(true);
        };
        /**
         * 增加该函数的目的仅为满足Ionic对route-link指令的处理
         * @param url 未知
         */
        RouterStub.prototype.serializeUrl = function (url) {
            return '';
        };
        /**
         * 注册导航返回的回调
         * @param fn 回调函数
         */
        RouterStub.prototype.registerNavigateCallbackFn = function (fn) {
            this.navigateCallbackFns.push(fn);
        };
        return RouterStub;
    }());
    RouterStub.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterStub, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RouterStub.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterStub });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterStub, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return []; } });

    var RouterTestingModule = /** @class */ (function () {
        function RouterTestingModule() {
        }
        return RouterTestingModule;
    }());
    RouterTestingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterTestingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RouterTestingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterTestingModule, imports: [testing.RouterTestingModule], exports: [testing.RouterTestingModule] });
    RouterTestingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterTestingModule, providers: [
            { provide: i1.ActivatedRoute, useClass: ActivatedRouteStub },
            { provide: i1.Router, useClass: RouterStub },
        ], imports: [[testing.RouterTestingModule], testing.RouterTestingModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0__namespace, type: RouterTestingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [testing.RouterTestingModule],
                        providers: [
                            { provide: i1.ActivatedRoute, useClass: ActivatedRouteStub },
                            { provide: i1.Router, useClass: RouterStub },
                        ],
                        exports: [testing.RouterTestingModule]
                    }]
            }] });

    /*
     * Public API Surface of router-testing
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActivatedRouteStub = ActivatedRouteStub;
    exports.ParamMapImpl = ParamMapImpl;
    exports.RouterStub = RouterStub;
    exports.RouterTestingModule = RouterTestingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=yunzhi-ng-router-testing.umd.js.map
