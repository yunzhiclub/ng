import { Observable } from 'rxjs';
import { ActivatedRoute, Event, NavigationExtras, Params, QueryParamsHandling, UrlTree } from '@angular/router';
import * as i0 from "@angular/core";
export declare class RouterStub {
    /**
     * An event stream for routing events in this NgModule.
     */
    readonly events: Observable<Event>;
    /**
     * 事件源
     */
    private readonly eventsSubject;
    private navigateCallbackFns;
    constructor();
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param commands 未知
     * @param navigationExtras 未知
     */
    createUrlTree(commands: any[], navigationExtras?: UrlCreationOptions): UrlTree;
    /**
     * 弹出新事件
     * @param event 事件
     */
    emitEvent(event: Event): void;
    navigateByUrl(url: string | UrlTree, extras?: NavigationExtras): Promise<boolean>;
    /**
     * 跳转
     * @param commands 参数
     * @param extras 扩展属性
     */
    navigate(commands: any[], extras?: NavigationExtras): Promise<boolean>;
    /**
     * 增加该函数的目的仅为满足Ionic对route-link指令的处理
     * @param url 未知
     */
    serializeUrl(url: UrlTree): string;
    /**
     * 注册导航返回的回调
     * @param fn 回调函数
     */
    registerNavigateCallbackFn(fn: (queryParams: Params) => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RouterStub, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RouterStub>;
}
interface UrlCreationOptions {
    relativeTo?: ActivatedRoute | null;
    queryParams?: Params | null;
    fragment?: string;
    queryParamsHandling?: QueryParamsHandling | null;
    preserveFragment?: boolean;
}
export {};
