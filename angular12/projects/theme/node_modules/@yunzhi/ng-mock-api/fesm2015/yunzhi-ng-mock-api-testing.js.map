{"version":3,"file":"yunzhi-ng-mock-api-testing.js","sources":["../../../projects/mock-api/testing/src/lib/delay-handler.testing.ts","../../../projects/mock-api/testing/src/lib/mock-api.testing.interceptor.ts","../../../projects/mock-api/testing/src/utils-test.ts","../../../projects/mock-api/testing/src/public_api.ts","../../../projects/mock-api/testing/src/yunzhi-ng-mock-api-testing.ts"],"sourcesContent":["import {of} from 'rxjs';\nimport {delay} from 'rxjs/operators';\nimport {cold} from 'jasmine-marbles';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Subscriber} from 'rxjs/internal/Subscriber';\nimport {DelayHandlerInterface, isNullOrUndefined, randomNumber} from '@yunzhi/ng-mock-api';\n\n/**\n * 测试时用于模拟delay.\n */\nexport class DelayHandlerTesting implements DelayHandlerInterface {\n\n  constructor() {\n  }\n\n  /**\n   * 发生网络错误\n   * @param message 错误消息\n   * @param subscriber 消息推送者\n   */\n  error(message: any, subscriber: Subscriber<HttpErrorResponse>): void {\n    this.randomDelayCallback(() => {\n      subscriber.error(new HttpErrorResponse({\n        status: 0,\n        error: message,\n        statusText: 'network error'\n      }));\n      subscriber.complete();\n    });\n  }\n\n  /**\n   * 返回供测试用的观察者\n   * 如果当前为测试过程中，则调用cold方法返回观察者将不出抛出异常。\n   * 否则使用of方法返回观察者\n   * @param data 返回的数据\n   * @param subject 可供继续发送数据的数据源\n   */\n  next<T>(data: T, subject: Subscriber<HttpResponse<T>>): void {\n    this.randomDelayCallback(() => {\n      isNullOrUndefined(data) ? subject.next(new HttpResponse()) : subject.next(new HttpResponse({body: data}));\n      subject.complete();\n    });\n  }\n\n  /**\n   * 随机延迟回调\n   * @param callbackFn 回调函数\n   */\n  private randomDelayCallback(callbackFn: () => void): void {\n    const delayCount = randomNumber() % 6;\n    try {\n      let interval = '';\n      for (let i = 0; i < delayCount; i++) {\n        interval += '---';\n      }\n      cold(interval + '(x|)', {x: undefined})\n        .subscribe(() => {\n          callbackFn();\n        });\n    } catch (e) {\n      if (e.message === 'No test scheduler initialized') {\n        of(null).pipe(delay(delayCount * delayCount * 100))\n          .subscribe(() => {\n            callbackFn();\n          });\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nimport {DelayHandlerTesting} from './delay-handler.testing';\nimport {Type} from '@angular/core';\n\n// 集成测试请启用如下代码\nimport {MockApiService, MockApiInterface} from '@yunzhi/ng-mock-api';\n// 开发时请启用如下代码\n// import {MockApiInterceptor} from '../../../src/lib/mock-api.interceptor';\n// import {MockApiService} from '../../../src/lib/mock-api.service';\n\n\n/**\n * 测试专用模拟API拦截器.\n */\nexport class MockApiTestingInterceptor implements HttpInterceptor {\n\n  /**\n   * 此静态变量应该变到构造函数中初始化.\n   * 区别：\n   * 1. 属性初始化：其它文件import本文件时执行\n   * 2. 构造函数：实例化时执行\n   */\n  private static mockApiService = null as MockApiService;\n\n  /**\n   * 启动时注册API\n   * @param mockApis 模拟API\n   */\n  static forRoot(mockApis: Type<MockApiInterface>[]): Type<HttpInterceptor> {\n    const mockApiService = MockApiService.getMockApiService(\n      new DelayHandlerTesting()\n    );\n\n    mockApiService.registerMockApis(mockApis);\n    MockApiTestingInterceptor.mockApiService = mockApiService;\n    return MockApiTestingInterceptor;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return MockApiTestingInterceptor.mockApiService.request<HttpRequest<any>>(req);\n  }\n}\n","import {interval} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n/**\n * 等待方法体中的函数返回true后，再返回promise\n * @param lastMethod 返回boolean值的函数\n * @param failureMessage 错误提示消息\n * @param timeout 超时时间\n */\nexport const waitsFor = async (lastMethod: () => boolean, failureMessage = '花费的时间过长，请检查判断条件', timeout = 2000): Promise<boolean> => {\n  let spentTime = 0;\n  while (!lastMethod()) {\n    if (spentTime > timeout) {\n      throw new Error('花费的时间过长，请检查判断条件');\n    }\n    await interval(25).pipe(take(1)).toPromise();\n    spentTime += 25;\n  }\n  return Promise.resolve(true);\n};\n\n/**\n * 等待一会\n * @param timeout 中断时长\n */\nexport const waits = async (timeout = 25): Promise<void> => {\n  while (timeout > 0) {\n    await interval(25).pipe(take(1)).toPromise();\n    timeout -= 25;\n  }\n  return Promise.resolve();\n};\n","/*\n * Public API Surface of mock-http-client testing\n */\nexport * from './lib/mock-api.testing.interceptor';\nexport * from './utils-test';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}
