import { HttpRequest, HttpResponseBase } from '@angular/common/http';
import { Observable } from 'rxjs';
import { isNotNullOrUndefined } from './utils';
/**
 * 模拟API
 */
export class MockApiService {
    /**
     * 循环调用从而完成所有的接口注册
     */
    constructor(delayHandler) {
        this.delayHandler = delayHandler;
        /**
         * 路由信息
         * Record<请求方法, Record<请求地址（正则表达式）, 回调函数<模拟返回的实体类型>>>
         */
        this.routers = {};
    }
    static getMockApiService(mockObservable) {
        return new MockApiService(mockObservable);
    }
    /**
     * 注册模拟接口
     * @param classes 接口类型
     */
    registerMockApis(classes) {
        classes.forEach(clazz => {
            const instance = new clazz();
            const injectors = instance.getInjectors();
            injectors.forEach(injector => {
                this.registerMockApi(injector.method, injector.url, injector.result);
            });
        });
    }
    /**
     * 注册模拟接口
     * @param method 请求方法
     * @param url 请求地址
     * @param handlerOrResult 获取数据源方法
     */
    registerMockApi(method, url, handlerOrResult) {
        if (method === null || method === undefined) {
            method = 'GET';
        }
        if (undefined === this.routers[method] || null === this.routers[method]) {
            this.routers[method] = {};
        }
        if (isNotNullOrUndefined(this.routers[method][url])) {
            throw Error(`在地址${url}已存在${method}的路由记录`);
        }
        this.routers[method][url] = handlerOrResult;
    }
    request(arg0, ...args) {
        // 初化始信息
        let url;
        let options;
        let method;
        // 根据请求参数类型,初始化请求基本信息
        if (arg0 instanceof HttpRequest) {
            method = arg0.method.toUpperCase();
            url = arg0.url;
            options = {
                body: arg0.body,
                headers: arg0.headers,
                reportProgress: arg0.reportProgress,
                observe: 'body',
                params: arg0.params,
                responseType: arg0.responseType,
                withCredentials: arg0.withCredentials
            };
        }
        else {
            method = arg0;
            url = args[0];
            options = args[1];
        }
        // 根据请求数据,查找注册的API
        const keys = [];
        let requestHandler = null;
        let urlMatches = undefined;
        const urlRecord = this.routers[method];
        for (const key in urlRecord) {
            if (urlRecord.hasOwnProperty(key)) {
                const reg = new RegExp(`^${key}$`);
                if (reg.test(url)) {
                    urlMatches = url.match(reg);
                    requestHandler = urlRecord[key];
                    keys.push(key);
                    if (keys.length > 1) {
                        const message = 'yzMockApi Error: conflict, matched multiple routes';
                        console.error(message, method, url, keys);
                        return new Observable(subscriber => {
                            this.delayHandler.error(message, subscriber);
                        });
                    }
                }
            }
        }
        // 未找到API则报错
        if (keys.length === 0) {
            return new Observable(subscriber => {
                const message = `yzMockApi Error: can't find mock result data: \n` +
                    `1. pls make sure the request's url '${url}' and method '${method}' is right. \n` +
                    `2. pls make sure your mockApi file has been added to the module HttpInterceptor.`;
                console.error(message);
                this.delayHandler.error(message, subscriber);
            });
        }
        // requestHandler可能是回调,也可能是返回值.在此做类型的判断.
        let result = null;
        if (typeof requestHandler === 'function') {
            requestHandler = requestHandler;
            result = requestHandler(urlMatches, options);
        }
        else {
            requestHandler = requestHandler;
            result = requestHandler;
        }
        // 按最终结果的类型分别返回
        if (result instanceof Observable) {
            return result;
        }
        else if (result instanceof HttpResponseBase) {
            return new Observable(ob => {
                ob.next(result);
                ob.complete();
            });
        }
        else {
            // 一般数据时加入延时
            return new Observable(observable1 => {
                this.delayHandler.next(result, observable1);
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,