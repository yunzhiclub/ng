import { of } from 'rxjs';
import { delay } from 'rxjs/operators';
import { cold } from 'jasmine-marbles';
import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { isNullOrUndefined, randomNumber } from '@yunzhi/ng-mock-api';
/**
 * 测试时用于模拟delay.
 */
export class DelayHandlerTesting {
    constructor() {
    }
    /**
     * 发生网络错误
     * @param message 错误消息
     * @param subscriber 消息推送者
     */
    error(message, subscriber) {
        this.randomDelayCallback(() => {
            subscriber.error(new HttpErrorResponse({
                status: 0,
                error: message,
                statusText: 'network error'
            }));
            subscriber.complete();
        });
    }
    /**
     * 返回供测试用的观察者
     * 如果当前为测试过程中，则调用cold方法返回观察者将不出抛出异常。
     * 否则使用of方法返回观察者
     * @param data 返回的数据
     * @param subject 可供继续发送数据的数据源
     */
    next(data, subject) {
        this.randomDelayCallback(() => {
            isNullOrUndefined(data) ? subject.next(new HttpResponse()) : subject.next(new HttpResponse({ body: data }));
            subject.complete();
        });
    }
    /**
     * 随机延迟回调
     * @param callbackFn 回调函数
     */
    randomDelayCallback(callbackFn) {
        const delayCount = randomNumber() % 6;
        try {
            let interval = '';
            for (let i = 0; i < delayCount; i++) {
                interval += '---';
            }
            cold(interval + '(x|)', { x: undefined })
                .subscribe(() => {
                callbackFn();
            });
        }
        catch (e) {
            if (e.message === 'No test scheduler initialized') {
                of(null).pipe(delay(delayCount * delayCount * 100))
                    .subscribe(() => {
                    callbackFn();
                });
            }
            else {
                throw e;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsYXktaGFuZGxlci50ZXN0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9jay1hcGkvdGVzdGluZy9zcmMvbGliL2RlbGF5LWhhbmRsZXIudGVzdGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDckMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXJFLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFM0Y7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW1CO0lBRTlCO0lBQ0EsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsT0FBWSxFQUFFLFVBQXlDO1FBQzNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUU7WUFDNUIsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLGlCQUFpQixDQUFDO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQztnQkFDVCxLQUFLLEVBQUUsT0FBTztnQkFDZCxVQUFVLEVBQUUsZUFBZTthQUM1QixDQUFDLENBQUMsQ0FBQztZQUNKLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFJLENBQUksSUFBTyxFQUFFLE9BQW9DO1FBQ25ELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUU7WUFDNUIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztZQUMxRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssbUJBQW1CLENBQUMsVUFBc0I7UUFDaEQsTUFBTSxVQUFVLEdBQUcsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLElBQUk7WUFDRixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsUUFBUSxJQUFJLEtBQUssQ0FBQzthQUNuQjtZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxFQUFFLEVBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBQyxDQUFDO2lCQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNkLFVBQVUsRUFBRSxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLCtCQUErQixFQUFFO2dCQUNqRCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDO3FCQUNoRCxTQUFTLENBQUMsR0FBRyxFQUFFO29CQUNkLFVBQVUsRUFBRSxDQUFDO2dCQUNmLENBQUMsQ0FBQyxDQUFDO2FBQ047aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLENBQUM7YUFDVDtTQUNGO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlbGF5fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge2NvbGR9IGZyb20gJ2phc21pbmUtbWFyYmxlcyc7XG5pbXBvcnQge0h0dHBFcnJvclJlc3BvbnNlLCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7U3Vic2NyaWJlcn0gZnJvbSAncnhqcy9pbnRlcm5hbC9TdWJzY3JpYmVyJztcbmltcG9ydCB7RGVsYXlIYW5kbGVySW50ZXJmYWNlLCBpc051bGxPclVuZGVmaW5lZCwgcmFuZG9tTnVtYmVyfSBmcm9tICdAeXVuemhpL25nLW1vY2stYXBpJztcblxuLyoqXG4gKiDmtYvor5Xml7bnlKjkuo7mqKHmi59kZWxheS5cbiAqL1xuZXhwb3J0IGNsYXNzIERlbGF5SGFuZGxlclRlc3RpbmcgaW1wbGVtZW50cyBEZWxheUhhbmRsZXJJbnRlcmZhY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgLyoqXG4gICAqIOWPkeeUn+e9kee7nOmUmeivr1xuICAgKiBAcGFyYW0gbWVzc2FnZSDplJnor6/mtojmga9cbiAgICogQHBhcmFtIHN1YnNjcmliZXIg5raI5oGv5o6o6YCB6ICFXG4gICAqL1xuICBlcnJvcihtZXNzYWdlOiBhbnksIHN1YnNjcmliZXI6IFN1YnNjcmliZXI8SHR0cEVycm9yUmVzcG9uc2U+KTogdm9pZCB7XG4gICAgdGhpcy5yYW5kb21EZWxheUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHN1YnNjcmliZXIuZXJyb3IobmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICBlcnJvcjogbWVzc2FnZSxcbiAgICAgICAgc3RhdHVzVGV4dDogJ25ldHdvcmsgZXJyb3InXG4gICAgICB9KSk7XG4gICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog6L+U5Zue5L6b5rWL6K+V55So55qE6KeC5a+f6ICFXG4gICAqIOWmguaenOW9k+WJjeS4uua1i+ivlei/h+eoi+S4re+8jOWImeiwg+eUqGNvbGTmlrnms5Xov5Tlm57op4Llr5/ogIXlsIbkuI3lh7rmipvlh7rlvILluLjjgIJcbiAgICog5ZCm5YiZ5L2/55Sob2bmlrnms5Xov5Tlm57op4Llr5/ogIVcbiAgICogQHBhcmFtIGRhdGEg6L+U5Zue55qE5pWw5o2uXG4gICAqIEBwYXJhbSBzdWJqZWN0IOWPr+S+m+e7p+e7reWPkemAgeaVsOaNrueahOaVsOaNrua6kFxuICAgKi9cbiAgbmV4dDxUPihkYXRhOiBULCBzdWJqZWN0OiBTdWJzY3JpYmVyPEh0dHBSZXNwb25zZTxUPj4pOiB2b2lkIHtcbiAgICB0aGlzLnJhbmRvbURlbGF5Q2FsbGJhY2soKCkgPT4ge1xuICAgICAgaXNOdWxsT3JVbmRlZmluZWQoZGF0YSkgPyBzdWJqZWN0Lm5leHQobmV3IEh0dHBSZXNwb25zZSgpKSA6IHN1YmplY3QubmV4dChuZXcgSHR0cFJlc3BvbnNlKHtib2R5OiBkYXRhfSkpO1xuICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOmaj+acuuW7tui/n+Wbnuiwg1xuICAgKiBAcGFyYW0gY2FsbGJhY2tGbiDlm57osIPlh73mlbBcbiAgICovXG4gIHByaXZhdGUgcmFuZG9tRGVsYXlDYWxsYmFjayhjYWxsYmFja0ZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgY29uc3QgZGVsYXlDb3VudCA9IHJhbmRvbU51bWJlcigpICUgNjtcbiAgICB0cnkge1xuICAgICAgbGV0IGludGVydmFsID0gJyc7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbGF5Q291bnQ7IGkrKykge1xuICAgICAgICBpbnRlcnZhbCArPSAnLS0tJztcbiAgICAgIH1cbiAgICAgIGNvbGQoaW50ZXJ2YWwgKyAnKHh8KScsIHt4OiB1bmRlZmluZWR9KVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICBjYWxsYmFja0ZuKCk7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm1lc3NhZ2UgPT09ICdObyB0ZXN0IHNjaGVkdWxlciBpbml0aWFsaXplZCcpIHtcbiAgICAgICAgb2YobnVsbCkucGlwZShkZWxheShkZWxheUNvdW50ICogZGVsYXlDb3VudCAqIDEwMCkpXG4gICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFja0ZuKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19