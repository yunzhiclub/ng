import { HttpEvent, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Type } from '@angular/core';
import { MockApiInterface } from './mock-api.interface';
import { DelayHandlerInterface } from './delay-handler.interface';
import { RequestHandler, RequestMethodType } from './mock-api.types';
/**
 * 模拟API
 */
export declare class MockApiService {
    private delayHandler;
    /**
     * 路由信息
     * Record<请求方法, Record<请求地址（正则表达式）, 回调函数<模拟返回的实体类型>>>
     */
    routers: Record<RequestMethodType, Record<any, any>>;
    static getMockApiService(mockObservable: DelayHandlerInterface): MockApiService;
    /**
     * 注册模拟接口
     * @param classes 接口类型
     */
    registerMockApis(classes: Type<MockApiInterface>[]): void;
    /**
     * 循环调用从而完成所有的接口注册
     */
    private constructor();
    /**
     * 注册模拟接口
     * @param method 请求方法
     * @param url 请求地址
     * @param handlerOrResult 获取数据源方法
     */
    registerMockApi<T>(method: RequestMethodType, url: string, handlerOrResult: T | RequestHandler<T>): void;
    request<R>(request: HttpRequest<any>): Observable<HttpEvent<R>>;
    /**
     * 所有的GET\POST\DELETE\PUT\PATCH方法最终均调用request方法。
     * 如果当前request不能够满足需求，则请移步angular官方提供的HttpClient
     *
     * 该方法先根据method进行匹配，接着根据URL进行正则表达式的匹配。
     * 匹配成功后将参数传入接口并获取模拟接口的返回值
     *
     * @param method 请求方法
     * @param url 请求地址
     * @param options 选项
     */
    request<R>(method: string, url: string, options: {
        body?: any;
        headers?: HttpHeaders | {
            [header: string]: string | string[];
        };
        reportProgress?: boolean;
        observe: 'body';
        params?: HttpParams | {
            [param: string]: string | string[];
        };
        responseType?: 'json';
        withCredentials?: boolean;
    }): Observable<R>;
}
