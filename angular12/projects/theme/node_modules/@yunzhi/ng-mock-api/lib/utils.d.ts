/**
 * 对字符串进行简单的加密
 * @param string 加密后的字符串
 */
export declare function hash(sourceString: string): number;
export declare const randomNumber: (range?: number) => number;
/**
 * 转换为loading字样
 * @param target 目标字符串
 * @param suffix 后缀
 * @param length 长度
 * @example
 * '请稍候' => '请稍候.'
 * '请稍候.' => '请稍候..'
 * '请稍候..' => '请稍候...'
 * '请稍候...' => '请稍候'
 */
export declare function convertToLoadingFormat(target: string, suffix?: string, length?: number): string;
export declare class Assert {
    /**
     * 断言是数组
     * @param value 断言的值
     * @param message 出错提示
     */
    static isArray(value: any, message: string): void;
    /**
     * 断言被定义
     * undefined 异常
     * null 成功
     * other 成功
     * @param args 多参数
     */
    static isDefined(...args: any[]): void;
    static isObject(...args: any[]): void;
    /**
     * 断言输入的值为字符串
     * @param args 字符串1，字符串2...提示信息
     */
    static isString(...args: any[]): void;
    static isNotNullOrUndefined(...args: any[]): void;
    /**
     * 校验参考并返回参数的最后一项做为message提示消息返回
     * @param args 多个参数
     */
    private static validateArgs;
    static isUndefined(param: any): void;
    /**
     * 断言为null
     * null 成功
     * undefined 异常
     * other 异常
     * @param param 输入
     */
    static isNull(param: any): void;
    /**
     * 断言类型为number
     * @param args 最少输入两个参数，前面的参数为校验值，最后一个提示信息
     */
    static isNumber(...args: any[]): void;
    static isTrue(...args: any[]): void;
}
/**
 * 是否不为null或undefined
 * undefined -> false
 * null -> false
 * other -> true
 * @param value 值
 */
export declare function isNotNullOrUndefined<T>(value: T | undefined | null): value is T;
/**
 * 为null或undefined
 * @param value 值
 */
export declare function isNullOrUndefined<T>(value: T | undefined | null): value is T;
/**
 * 是否被定义
 * undefined -> false
 * other -> true
 * @param value 校验值
 */
export declare function isDefined<T>(value: T | undefined): value is T;
export declare function uniqueId(): string;
/**
 * 只包含属性而不包含方法
 * https://stackoverflow.com/questions/52692606/how-to-declare-a-type-in-typescript-that-only-includes-objects-and-not-functions
 */
export interface UnknownProperty {
    [k: string]: unknown;
}
export declare class Random {
    /**
     * 获取随机数据
     * @param width 位宽
     */
    static nextNumber(width?: number): number;
    /**
     * 获取随机字符串
     * @param prefix 返回字符串的前缀
     * @param length 字符串长度
     */
    static nextString(prefix?: string, length?: number): string;
}
export declare const randomChineseString: (preString?: string, length?: number) => string;
/**
 * 随机时间戳
 * @param day 随机生成的时间范围（天）
 * @param baseDate 生成时间范围基于某天
 * @sample
 * randomTimestamp(10, new Date(2020, 7, 12))
 * 返回：2020年7月12日前后10天的随机一天
 */
export declare const randomTimestamp: (day?: number, baseDate?: Date) => number;
export declare const randomBoolean: () => boolean;
export declare const randomString: (prefix?: string, length?: number) => string;
