(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@yunzhi/ng-mock-api', ['exports', 'rxjs', 'rxjs/operators', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.yunzhi = global.yunzhi || {}, global.yunzhi['ng-mock-api'] = {}), global.rxjs, global.rxjs.operators, global.ng.common.http));
}(this, (function (exports, rxjs, operators, http) { 'use strict';

    /**
     * 对字符串进行简单的加密
     * @param string 加密后的字符串
     */
    function hash(sourceString) {
        var hashCode = 0;
        var i;
        var chr;
        for (i = 0; i < sourceString.length; i++) {
            chr = sourceString.charCodeAt(i);
            // tslint:disable-next-line:no-bitwise
            hashCode = ((hashCode << 5) - hashCode) + chr;
            // tslint:disable-next-line:no-bitwise
            hashCode |= 0; // Convert to 32bit integer
        }
        return hashCode;
    }
    var randomNumber = function (range) {
        if (range === void 0) { range = 1000; }
        return Math.floor(Math.random() * range);
    };
    /**
     * 转换为loading字样
     * @param target 目标字符串
     * @param suffix 后缀
     * @param length 长度
     * @example
     * '请稍候' => '请稍候.'
     * '请稍候.' => '请稍候..'
     * '请稍候..' => '请稍候...'
     * '请稍候...' => '请稍候'
     */
    function convertToLoadingFormat(target, suffix, length) {
        if (suffix === void 0) { suffix = '.'; }
        if (length === void 0) { length = 3; }
        var strings = target.split(suffix);
        if (strings.length <= length) {
            target += '.';
        }
        else {
            target = strings[0];
        }
        return target;
    }
    var Assert = /** @class */ (function () {
        function Assert() {
        }
        /**
         * 断言是数组
         * @param value 断言的值
         * @param message 出错提示
         */
        Assert.isArray = function (value, message) {
            if (!isNotNullOrUndefined(value) || !Array.isArray(value)) {
                throw new Error(message);
            }
        };
        /**
         * 断言被定义
         * undefined 异常
         * null 成功
         * other 成功
         * @param args 多参数
         */
        Assert.isDefined = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (value) {
                if (!isDefined(value)) {
                    throw new Error(message);
                }
            });
        };
        Assert.isObject = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (arg) {
                var type = typeof arg;
                var isObject = type === 'function' || type === 'object' && !!arg;
                if (!isObject) {
                    throw new Error(message);
                }
            });
        };
        /**
         * 断言输入的值为字符串
         * @param args 字符串1，字符串2...提示信息
         */
        Assert.isString = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (value) {
                if (typeof value !== 'string') {
                    throw new Error(message);
                }
            });
        };
        Assert.isNotNullOrUndefined = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (value, index) {
                if (!isNotNullOrUndefined(value)) {
                    throw new Error(message + ":" + index);
                }
            });
        };
        /**
         * 校验参考并返回参数的最后一项做为message提示消息返回
         * @param args 多个参数
         */
        Assert.validateArgs = function (args) {
            if (args.length < 2) {
                throw new Error('最少输入两个参数');
            }
            if (typeof (args[args.length - 1]) !== 'string') {
                throw new Error('最后一个参数必须为字符串');
            }
            var message = args.pop();
            return message;
        };
        Assert.isUndefined = function (param) {
            if (typeof param !== 'undefined') {
                throw new Error('变量已定义');
            }
        };
        /**
         * 断言为null
         * null 成功
         * undefined 异常
         * other 异常
         * @param param 输入
         */
        Assert.isNull = function (param) {
            if (typeof param === 'undefined' || param !== null) {
                throw new Error('变量非空');
            }
        };
        /**
         * 断言类型为number
         * @param args 最少输入两个参数，前面的参数为校验值，最后一个提示信息
         */
        Assert.isNumber = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (value) {
                if (typeof value !== 'number') {
                    throw new Error(message);
                }
            });
        };
        Assert.isTrue = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = this.validateArgs(args);
            args.forEach(function (value) {
                if (value !== true) {
                    throw new Error(message);
                }
            });
        };
        return Assert;
    }());
    /**
     * 是否不为null或undefined
     * undefined -> false
     * null -> false
     * other -> true
     * @param value 值
     */
    function isNotNullOrUndefined(value) {
        return value !== undefined && value !== null;
    }
    /**
     * 为null或undefined
     * @param value 值
     */
    function isNullOrUndefined(value) {
        return !isNotNullOrUndefined(value);
    }
    /**
     * 是否被定义
     * undefined -> false
     * other -> true
     * @param value 校验值
     */
    function isDefined(value) {
        return value !== undefined;
    }
    function uniqueId() {
        return '_' + Math.random().toString(36).substr(2, 9);
    }
    // 解码
    var decodeUnicode = function (str) {
        str = '\\u' + str;
        str = str.replace(/\\/g, '%');
        str = unescape(str);
        str = str.replace(/%/g, '\\');
        return str;
    };
    var Random = /** @class */ (function () {
        function Random() {
        }
        /**
         * 获取随机数据
         * @param width 位宽
         */
        Random.nextNumber = function (width) {
            if (width === void 0) { width = 32; }
            var range = 1;
            while (width > 0) {
                range = range * 2;
                width--;
            }
            return Math.floor(Math.random() * range);
        };
        /**
         * 获取随机字符串
         * @param prefix 返回字符串的前缀
         * @param length 字符串长度
         */
        Random.nextString = function (prefix, length) {
            if (prefix === void 0) { prefix = ''; }
            if (length === void 0) { length = 4; }
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return prefix + result;
        };
        return Random;
    }());
    /*
    * 获取取机的中文字符串
    */
    var randomChineseString = function (preString, length) {
        if (preString === void 0) { preString = ''; }
        if (length === void 0) { length = 3; }
        var name = '';
        for (var i = 0; i < length; i++) {
            var unicodeNum = '';
            unicodeNum = randomNumberByRange(0x4e00, 0x9fa5).toString(16);
            name += decodeUnicode(unicodeNum);
        }
        return preString + name;
    };
    /**
     * 获取指定范围内的随机数
     * @param min 最小值
     * @param max 最大值
     */
    var randomNumberByRange = function (min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1000; }
        return Math.floor(Math.random() * (min - max) + max);
    };
    /**
     * 随机时间戳
     * @param day 随机生成的时间范围（天）
     * @param baseDate 生成时间范围基于某天
     * @sample
     * randomTimestamp(10, new Date(2020, 7, 12))
     * 返回：2020年7月12日前后10天的随机一天
     */
    var randomTimestamp = function (day, baseDate) {
        if (day === void 0) { day = 7; }
        if (baseDate === void 0) { baseDate = new Date(); }
        var range = 1000 * 60 * 60 * 24 * day * 2;
        return baseDate.getTime() + randomNumber(range) - range / 2;
    };
    var randomBoolean = function () {
        return randomNumber(10) % 2 === 0;
    };
    var randomString = function (prefix, length) {
        if (prefix === void 0) { prefix = ''; }
        if (length === void 0) { length = 4; }
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return prefix + result;
    };

    /**
     * 延时处理器.
     */
    var DelayHandler = /** @class */ (function () {
        function DelayHandler() {
        }
        /**
         * 发生错误时延时调用error方法
         * @param message 错误信息
         * @param subscriber 订阅者
         */
        DelayHandler.prototype.error = function (message, subscriber) {
            this.randomDelayCallback(function () {
                subscriber.error(new http.HttpErrorResponse({
                    status: 0,
                    error: message,
                    statusText: 'network error'
                }));
                subscriber.complete();
            });
        };
        /**
         * 使用随机的延时返回数据
         * @param data 数据
         * @param subscriber 订阅者
         */
        DelayHandler.prototype.next = function (data, subscriber) {
            this.randomDelayCallback(function () {
                subscriber.next(new http.HttpResponse({ body: data }));
                subscriber.complete();
            });
        };
        DelayHandler.prototype.randomDelayCallback = function (callbackFn) {
            rxjs.of(null).pipe(operators.delay(randomNumber() % 6 * 100)).subscribe(function () {
                callbackFn();
            });
        };
        return DelayHandler;
    }());

    /**
     * 模拟API
     */
    var MockApiService = /** @class */ (function () {
        /**
         * 循环调用从而完成所有的接口注册
         */
        function MockApiService(delayHandler) {
            this.delayHandler = delayHandler;
            /**
             * 路由信息
             * Record<请求方法, Record<请求地址（正则表达式）, 回调函数<模拟返回的实体类型>>>
             */
            this.routers = {};
        }
        MockApiService.getMockApiService = function (mockObservable) {
            return new MockApiService(mockObservable);
        };
        /**
         * 注册模拟接口
         * @param classes 接口类型
         */
        MockApiService.prototype.registerMockApis = function (classes) {
            var _this = this;
            classes.forEach(function (clazz) {
                var instance = new clazz();
                var injectors = instance.getInjectors();
                injectors.forEach(function (injector) {
                    _this.registerMockApi(injector.method, injector.url, injector.result);
                });
            });
        };
        /**
         * 注册模拟接口
         * @param method 请求方法
         * @param url 请求地址
         * @param handlerOrResult 获取数据源方法
         */
        MockApiService.prototype.registerMockApi = function (method, url, handlerOrResult) {
            if (method === null || method === undefined) {
                method = 'GET';
            }
            if (undefined === this.routers[method] || null === this.routers[method]) {
                this.routers[method] = {};
            }
            if (isNotNullOrUndefined(this.routers[method][url])) {
                throw Error("\u5728\u5730\u5740" + url + "\u5DF2\u5B58\u5728" + method + "\u7684\u8DEF\u7531\u8BB0\u5F55");
            }
            this.routers[method][url] = handlerOrResult;
        };
        MockApiService.prototype.request = function (arg0) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            // 初化始信息
            var url;
            var options;
            var method;
            // 根据请求参数类型,初始化请求基本信息
            if (arg0 instanceof http.HttpRequest) {
                method = arg0.method.toUpperCase();
                url = arg0.url;
                options = {
                    body: arg0.body,
                    headers: arg0.headers,
                    reportProgress: arg0.reportProgress,
                    observe: 'body',
                    params: arg0.params,
                    responseType: arg0.responseType,
                    withCredentials: arg0.withCredentials
                };
            }
            else {
                method = arg0;
                url = args[0];
                options = args[1];
            }
            // 根据请求数据,查找注册的API
            var keys = [];
            var requestHandler = null;
            var urlMatches = undefined;
            var urlRecord = this.routers[method];
            var _loop_1 = function (key) {
                if (urlRecord.hasOwnProperty(key)) {
                    var reg = new RegExp("^" + key + "$");
                    if (reg.test(url)) {
                        urlMatches = url.match(reg);
                        requestHandler = urlRecord[key];
                        keys.push(key);
                        if (keys.length > 1) {
                            var message_1 = 'yzMockApi Error: conflict, matched multiple routes';
                            console.error(message_1, method, url, keys);
                            return { value: new rxjs.Observable(function (subscriber) {
                                    _this.delayHandler.error(message_1, subscriber);
                                }) };
                        }
                    }
                }
            };
            for (var key in urlRecord) {
                var state_1 = _loop_1(key);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            // 未找到API则报错
            if (keys.length === 0) {
                return new rxjs.Observable(function (subscriber) {
                    var message = "yzMockApi Error: can't find mock result data: \n" +
                        ("1. pls make sure the request's url '" + url + "' and method '" + method + "' is right. \n") +
                        "2. pls make sure your mockApi file has been added to the module HttpInterceptor.";
                    console.error(message);
                    _this.delayHandler.error(message, subscriber);
                });
            }
            // requestHandler可能是回调,也可能是返回值.在此做类型的判断.
            var result = null;
            if (typeof requestHandler === 'function') {
                requestHandler = requestHandler;
                result = requestHandler(urlMatches, options);
            }
            else {
                requestHandler = requestHandler;
                result = requestHandler;
            }
            // 按最终结果的类型分别返回
            if (result instanceof rxjs.Observable) {
                return result;
            }
            else if (result instanceof http.HttpResponseBase) {
                return new rxjs.Observable(function (ob) {
                    ob.next(result);
                    ob.complete();
                });
            }
            else {
                // 一般数据时加入延时
                return new rxjs.Observable(function (observable1) {
                    _this.delayHandler.next(result, observable1);
                });
            }
        };
        return MockApiService;
    }());

    /**
     * 模拟拦截器.
     */
    var MockApiInterceptor = /** @class */ (function () {
        function MockApiInterceptor() {
        }
        /**
         * 启动时注册API
         * @param mockApis 模拟API
         */
        MockApiInterceptor.forRoot = function (mockApis) {
            var mockApiService = MockApiService.getMockApiService(new DelayHandler());
            mockApiService.registerMockApis(mockApis);
            MockApiInterceptor.mockApiService = mockApiService;
            return MockApiInterceptor;
        };
        MockApiInterceptor.prototype.intercept = function (req, next) {
            return MockApiInterceptor.mockApiService.request(req);
        };
        return MockApiInterceptor;
    }());
    /**
     * 此静态变量应该变到构造函数中初始化.
     * 区别：
     * 1. 属性初始化：其它文件import本文件时执行
     * 2. 构造函数：实例化时执行
     */
    MockApiInterceptor.mockApiService = null;

    /**
     * 此文中Benson对构造函数的重载回答的真好!
     * https://www.itranslater.com/qa/details/2109909368035607552
     */
    var ApiInjector = /** @class */ (function () {
        function ApiInjector(obj) {
            if (obj === void 0) { obj = {}; }
            this.method = obj.method;
            this.url = obj.url;
            this.description = obj.description;
            this.result = obj.result;
        }
        return ApiInjector;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ApiInjector = ApiInjector;
    exports.Assert = Assert;
    exports.MockApiInterceptor = MockApiInterceptor;
    exports.MockApiService = MockApiService;
    exports.Random = Random;
    exports.convertToLoadingFormat = convertToLoadingFormat;
    exports.hash = hash;
    exports.isDefined = isDefined;
    exports.isNotNullOrUndefined = isNotNullOrUndefined;
    exports.isNullOrUndefined = isNullOrUndefined;
    exports.randomBoolean = randomBoolean;
    exports.randomChineseString = randomChineseString;
    exports.randomNumber = randomNumber;
    exports.randomString = randomString;
    exports.randomTimestamp = randomTimestamp;
    exports.uniqueId = uniqueId;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=yunzhi-ng-mock-api.umd.js.map
