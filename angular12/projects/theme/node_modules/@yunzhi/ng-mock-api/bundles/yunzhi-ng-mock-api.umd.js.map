{"version":3,"file":"yunzhi-ng-mock-api.umd.js","sources":["../../../projects/mock-api/src/lib/utils.ts","../../../projects/mock-api/src/lib/delay-handler.ts","../../../projects/mock-api/src/lib/mock-api.service.ts","../../../projects/mock-api/src/lib/mock-api.interceptor.ts","../../../projects/mock-api/src/lib/mock-api.types.ts","../../../projects/mock-api/src/yunzhi-ng-mock-api.ts"],"sourcesContent":["/**\n * 对字符串进行简单的加密\n * @param string 加密后的字符串\n */\nexport function hash(sourceString: string): number {\n  let hashCode = 0;\n  let i;\n  let chr;\n  for (i = 0; i < sourceString.length; i++) {\n    chr = sourceString.charCodeAt(i);\n    // tslint:disable-next-line:no-bitwise\n    hashCode = ((hashCode << 5) - hashCode) + chr;\n    // tslint:disable-next-line:no-bitwise\n    hashCode |= 0; // Convert to 32bit integer\n  }\n  return hashCode;\n}\n\nexport const randomNumber = (range = 1000) => {\n  return Math.floor(Math.random() * range);\n};\n\n/**\n * 转换为loading字样\n * @param target 目标字符串\n * @param suffix 后缀\n * @param length 长度\n * @example\n * '请稍候' => '请稍候.'\n * '请稍候.' => '请稍候..'\n * '请稍候..' => '请稍候...'\n * '请稍候...' => '请稍候'\n */\nexport function convertToLoadingFormat(target: string, suffix = '.', length = 3): string {\n  const strings = target.split(suffix);\n  if (strings.length <= length) {\n    target += '.';\n  } else {\n    target = strings[0];\n  }\n  return target;\n}\n\n\nexport class Assert {\n\n  /**\n   * 断言是数组\n   * @param value 断言的值\n   * @param message 出错提示\n   */\n  static isArray(value: any, message: string): void {\n    if (!isNotNullOrUndefined(value) || !Array.isArray(value)) {\n      throw new Error(message);\n    }\n  }\n\n  /**\n   * 断言被定义\n   * undefined 异常\n   * null 成功\n   * other 成功\n   * @param args 多参数\n   */\n  static isDefined(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach(value => {\n      if (!isDefined(value)) {\n        throw new Error(message);\n      }\n    });\n  }\n\n  static isObject(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach(arg => {\n      const type = typeof arg;\n      const isObject = type === 'function' || type === 'object' && !!arg;\n      if (!isObject) {\n        throw new Error(message);\n      }\n    });\n  }\n\n  /**\n   * 断言输入的值为字符串\n   * @param args 字符串1，字符串2...提示信息\n   */\n  static isString(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach(value => {\n      if (typeof value !== 'string') {\n        throw new Error(message);\n      }\n    });\n  }\n\n  static isNotNullOrUndefined(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach((value, index) => {\n      if (!isNotNullOrUndefined(value)) {\n        throw new Error(`${message}:${index}`);\n      }\n    });\n  }\n\n  /**\n   * 校验参考并返回参数的最后一项做为message提示消息返回\n   * @param args 多个参数\n   */\n  private static validateArgs(args: any[]): string {\n    if (args.length < 2) {\n      throw new Error('最少输入两个参数');\n    }\n\n    if (typeof (args[args.length - 1]) !== 'string') {\n      throw new Error('最后一个参数必须为字符串');\n    }\n\n    const message = args.pop();\n    return message;\n  }\n\n  static isUndefined(param: any): void {\n    if (typeof param !== 'undefined') {\n      throw new Error('变量已定义');\n    }\n  }\n\n  /**\n   * 断言为null\n   * null 成功\n   * undefined 异常\n   * other 异常\n   * @param param 输入\n   */\n  static isNull(param: any): void {\n    if (typeof param === 'undefined' || param !== null) {\n      throw new Error('变量非空');\n    }\n  }\n\n  /**\n   * 断言类型为number\n   * @param args 最少输入两个参数，前面的参数为校验值，最后一个提示信息\n   */\n  static isNumber(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach(value => {\n      if (typeof value !== 'number') {\n        throw new Error(message);\n      }\n    });\n  }\n\n  static isTrue(...args: any[]): void {\n    const message = this.validateArgs(args);\n    args.forEach(value => {\n      if (value !== true) {\n        throw new Error(message);\n      }\n    });\n  }\n}\n\n/**\n * 是否不为null或undefined\n * undefined -> false\n * null -> false\n * other -> true\n * @param value 值\n */\nexport function isNotNullOrUndefined<T>(value: T | undefined | null): value is T {\n  return value as T !== undefined && value as T !== null;\n}\n\n/**\n * 为null或undefined\n * @param value 值\n */\nexport function isNullOrUndefined<T>(value: T | undefined | null): value is T {\n  return !isNotNullOrUndefined(value);\n}\n\n/**\n * 是否被定义\n * undefined -> false\n * other -> true\n * @param value 校验值\n */\nexport function isDefined<T>(value: T | undefined): value is T {\n  return value as T !== undefined;\n}\n\nexport function uniqueId(): string {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\n/**\n * 只包含属性而不包含方法\n * https://stackoverflow.com/questions/52692606/how-to-declare-a-type-in-typescript-that-only-includes-objects-and-not-functions\n */\nexport interface UnknownProperty {\n  [k: string]: unknown;\n}\n\n\n// 解码\nconst decodeUnicode = (str: string): string => {\n  str = '\\\\u' + str;\n  str = str.replace(/\\\\/g, '%');\n\n  str = unescape(str);\n  str = str.replace(/%/g, '\\\\');\n  return str;\n};\n\nexport class Random {\n  /**\n   * 获取随机数据\n   * @param width 位宽\n   */\n  static nextNumber(width = 32): number {\n    let range = 1;\n    while (width > 0) {\n      range = range * 2;\n      width--;\n    }\n\n    return Math.floor(Math.random() * range);\n  }\n\n  /**\n   * 获取随机字符串\n   * @param prefix 返回字符串的前缀\n   * @param length 字符串长度\n   */\n  static nextString(prefix = '', length = 4): string {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return prefix + result;\n  }\n}\n\n/*\n* 获取取机的中文字符串\n*/\nexport const randomChineseString = (preString = '', length = 3): string => {\n  let name = '';\n  for (let i = 0; i < length; i++) {\n    let unicodeNum = '';\n    unicodeNum = randomNumberByRange(0x4e00, 0x9fa5).toString(16);\n    name += decodeUnicode(unicodeNum);\n  }\n  return preString + name;\n};\n\n/**\n * 获取指定范围内的随机数\n * @param min 最小值\n * @param max 最大值\n */\nconst randomNumberByRange = (min = 0, max = 1000): number => {\n  return Math.floor(Math.random() * (min - max) + max);\n};\n\n/**\n * 随机时间戳\n * @param day 随机生成的时间范围（天）\n * @param baseDate 生成时间范围基于某天\n * @sample\n * randomTimestamp(10, new Date(2020, 7, 12))\n * 返回：2020年7月12日前后10天的随机一天\n */\nexport const randomTimestamp = (day = 7, baseDate = new Date()) => {\n  const range = 1000 * 60 * 60 * 24 * day * 2;\n  return baseDate.getTime() + randomNumber(range) - range / 2;\n};\n\n\nexport const randomBoolean = () => {\n  return randomNumber(10) % 2 === 0;\n};\n\nexport const randomString = (prefix = '', length = 4) => {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return prefix + result;\n};\n","import {of} from 'rxjs';\nimport {delay} from 'rxjs/operators';\nimport {HttpErrorResponse, HttpEvent, HttpResponse} from '@angular/common/http';\nimport {DelayHandlerInterface} from './delay-handler.interface';\nimport {randomNumber} from './utils';\nimport {Subscriber} from 'rxjs/internal/Subscriber';\n\n/**\n * 延时处理器.\n */\nexport class DelayHandler implements DelayHandlerInterface {\n\n  constructor() {\n  }\n\n  /**\n   * 发生错误时延时调用error方法\n   * @param message 错误信息\n   * @param subscriber 订阅者\n   */\n  error(message: any, subscriber: Subscriber<HttpErrorResponse>): void {\n    this.randomDelayCallback(() => {\n      subscriber.error(new HttpErrorResponse({\n        status: 0,\n        error: message,\n        statusText: 'network error'\n      }));\n      subscriber.complete();\n    });\n  }\n\n  /**\n   * 使用随机的延时返回数据\n   * @param data 数据\n   * @param subscriber 订阅者\n   */\n  next<T>(data: T, subscriber: Subscriber<HttpEvent<T>>): void {\n    this.randomDelayCallback(() => {\n      subscriber.next(new HttpResponse({body: data}));\n      subscriber.complete();\n    });\n  }\n\n  private randomDelayCallback(callbackFn: () => void): void {\n    of(null).pipe(delay(randomNumber() % 6 * 100)).subscribe(() => {\n      callbackFn();\n    });\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHeaders,\n  HttpParams, HttpRequest, HttpResponseBase\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Type} from '@angular/core';\nimport {MockApiInterface} from './mock-api.interface';\nimport {isNotNullOrUndefined} from './utils';\nimport {DelayHandlerInterface} from './delay-handler.interface';\nimport {RequestHandler, RequestMethodType} from './mock-api.types';\n\n/**\n * 模拟API\n */\nexport class MockApiService {\n  /**\n   * 路由信息\n   * Record<请求方法, Record<请求地址（正则表达式）, 回调函数<模拟返回的实体类型>>>\n   */\n  routers = {} as Record<RequestMethodType, Record<any, any | RequestHandler<any>>>;\n\n  public static getMockApiService(mockObservable: DelayHandlerInterface): MockApiService {\n    return new MockApiService(mockObservable);\n  }\n\n\n  /**\n   * 注册模拟接口\n   * @param classes 接口类型\n   */\n  registerMockApis(classes: Type<MockApiInterface>[]): void {\n    classes.forEach(clazz => {\n      const instance = new clazz();\n      const injectors = instance.getInjectors();\n      injectors.forEach(injector => {\n        this.registerMockApi(injector.method, injector.url, injector.result);\n      });\n    });\n  }\n\n  /**\n   * 循环调用从而完成所有的接口注册\n   */\n  private constructor(private delayHandler: DelayHandlerInterface) {\n  }\n\n  /**\n   * 注册模拟接口\n   * @param method 请求方法\n   * @param url 请求地址\n   * @param handlerOrResult 获取数据源方法\n   */\n  registerMockApi<T>(method: RequestMethodType,\n                     url: string,\n                     handlerOrResult: T | RequestHandler<T>): void {\n    if (method === null || method === undefined) {\n      method = 'GET';\n    }\n    if (undefined === this.routers[method] || null === this.routers[method]) {\n      this.routers[method] = {} as Record<string, RequestHandler<T>>;\n    }\n\n    if (isNotNullOrUndefined(this.routers[method][url])) {\n      throw Error(`在地址${url}已存在${method}的路由记录`);\n    }\n\n    this.routers[method][url] = handlerOrResult;\n  }\n\n  request<R>(request: HttpRequest<any>): Observable<HttpEvent<R>>;\n  /**\n   * 所有的GET\\POST\\DELETE\\PUT\\PATCH方法最终均调用request方法。\n   * 如果当前request不能够满足需求，则请移步angular官方提供的HttpClient\n   *\n   * 该方法先根据method进行匹配，接着根据URL进行正则表达式的匹配。\n   * 匹配成功后将参数传入接口并获取模拟接口的返回值\n   *\n   * @param method 请求方法\n   * @param url 请求地址\n   * @param options 选项\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    observe: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<R>;\n  request<R>(arg0: any, ...args: any[]): any {\n    // 初化始信息\n    let url: string;\n    let options: {\n      body?: any;\n      headers?: HttpHeaders | {\n        [header: string]: string | string[];\n      };\n      reportProgress?: boolean;\n      observe: 'body';\n      params?: HttpParams | {\n        [param: string]: string | string[];\n      };\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    };\n    let method: RequestMethodType;\n\n    // 根据请求参数类型,初始化请求基本信息\n    if (arg0 instanceof HttpRequest) {\n      method = arg0.method.toUpperCase() as RequestMethodType;\n      url = arg0.url;\n      options = {\n        body: arg0.body,\n        headers: arg0.headers,\n        reportProgress: arg0.reportProgress,\n        observe: 'body',\n        params: arg0.params,\n        responseType: arg0.responseType,\n        withCredentials: arg0.withCredentials\n      };\n    } else {\n      method = arg0;\n      url = args[0];\n      options = args[1];\n    }\n\n    // 根据请求数据,查找注册的API\n    const keys = [];\n    let requestHandler = null as RequestHandler<R> | R;\n    let urlMatches = undefined as Array<string>;\n    const urlRecord = this.routers[method] as Record<RequestMethodType, RequestHandler<R> | R>;\n\n    for (const key in urlRecord) {\n      if (urlRecord.hasOwnProperty(key)) {\n        const reg = new RegExp(`^${key}$`);\n        if (reg.test(url)) {\n          urlMatches = url.match(reg);\n          requestHandler = urlRecord[key as RequestMethodType];\n          keys.push(key);\n          if (keys.length > 1) {\n            const message = 'yzMockApi Error: conflict, matched multiple routes';\n            console.error(message, method, url, keys);\n            return new Observable<HttpErrorResponse>(subscriber => {\n              this.delayHandler.error(message, subscriber);\n            });\n          }\n        }\n      }\n    }\n\n    // 未找到API则报错\n    if (keys.length === 0) {\n      return new Observable<HttpErrorResponse>(subscriber => {\n        const message = `yzMockApi Error: can't find mock result data: \\n` +\n          `1. pls make sure the request's url '${url}' and method '${method}' is right. \\n` +\n          `2. pls make sure your mockApi file has been added to the module HttpInterceptor.`;\n        console.error(message);\n        this.delayHandler.error(message, subscriber);\n      });\n    }\n\n    // requestHandler可能是回调,也可能是返回值.在此做类型的判断.\n    let result = null as Observable<HttpEvent<R>> | R;\n    if (typeof requestHandler === 'function') {\n      requestHandler = requestHandler as RequestHandler<R>;\n      result = requestHandler(urlMatches, options);\n    } else {\n      requestHandler = requestHandler as R;\n      result = requestHandler;\n    }\n\n    // 按最终结果的类型分别返回\n    if (result instanceof Observable) {\n      return result;\n    } else if (result instanceof HttpResponseBase) {\n      return new Observable(ob => {\n        ob.next(result);\n        ob.complete();\n      });\n    } else {\n      // 一般数据时加入延时\n      return new Observable<HttpEvent<R>>(observable1 => {\n        this.delayHandler.next(result, observable1);\n      });\n    }\n  }\n}\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DelayHandler} from './delay-handler';\nimport {MockApiService} from './mock-api.service';\nimport {Type} from '@angular/core';\nimport {MockApiInterface} from './mock-api.interface';\n\n/**\n * 模拟拦截器.\n */\nexport class MockApiInterceptor implements HttpInterceptor {\n  /**\n   * 此静态变量应该变到构造函数中初始化.\n   * 区别：\n   * 1. 属性初始化：其它文件import本文件时执行\n   * 2. 构造函数：实例化时执行\n   */\n  private static mockApiService = null as MockApiService;\n\n  /**\n   * 启动时注册API\n   * @param mockApis 模拟API\n   */\n  static forRoot(mockApis: Type<MockApiInterface>[]): Type<HttpInterceptor> {\n    const mockApiService = MockApiService.getMockApiService(\n      new DelayHandler()\n    );\n\n    mockApiService.registerMockApis(mockApis);\n    MockApiInterceptor.mockApiService = mockApiService;\n    return MockApiInterceptor;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return MockApiInterceptor.mockApiService.request<HttpRequest<any>>(req);\n  }\n}\n","import {Observable} from 'rxjs';\nimport {HttpEvent, HttpHeaders, HttpParams} from '@angular/common/http';\n\n/**\n * 请求的5种类型\n */\nexport  type RequestMethodType = 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH';\n\n/**\n * 请求处理器.\n * @param delayNext 用于发送模拟延迟的数据\n * @param urlMatches URL匹配信息\n * @param options 其它请求选项\n */\nexport type RequestHandler<T>\n  = (urlMatches: Array<string>,\n     options: RequestOptions) => Observable<HttpEvent<T>> | T;\n/**\n * 请求选项\n */\nexport type RequestOptions = {\n  body?: any;\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  reportProgress?: boolean;\n  observe: 'body' | 'events' | 'response';\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  withCredentials?: boolean;\n};\n\n/**\n * 此文中Benson对构造函数的重载回答的真好!\n * https://www.itranslater.com/qa/details/2109909368035607552\n */\nexport class ApiInjector {\n  method?: RequestMethodType;\n  /**\n   * 请求地址\n   */\n  url: string;\n  /**\n   * 对当前接口的描述\n   */\n  description?: string;\n  /**\n   * 返回结果,优先获取\n   */\n  result?: any | RequestHandler<any>;\n\n  constructor(obj: ApiInjector = {} as ApiInjector) {\n    this.method = obj.method;\n    this.url = obj.url;\n    this.description = obj.description;\n    this.result = obj.result;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["HttpErrorResponse","HttpResponse","of","delay","HttpRequest","Observable","HttpResponseBase"],"mappings":"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"}
